//variables to setup basic size and shape of the card and pips
$card-width: 40vw;
$card-height: $card-width*1.4;
$font-size-number: $card-width * 0.1;
$icon-size: $card-width / 5;

*,
*:before,
*:after {
    box-sizing: border-box;
    margin: 0;
    padding: 0;
}
//styles to draw a basic outline of a card
.card {
    border: 1px solid grey;
    height: $card-height;
    width: $card-width;
    border-radius: 10px;
    margin: 20px;
    box-shadow: 2px 2px 4px grey;
}
//because it is a card front we want a bit of extra padding
.card-front {
    padding: .5em;
}
//set icon size
.icon {
    width: $icon-size;
    height: $icon-size;
}
.number {
    text-align: center;
    font-size: $font-size-number;
  //an icon that is part of a number should be half the normal size
    & > .icon {
        width: $icon-size * .5;
        height: $icon-size *.5;
    }
}
//rotate bottom pips 180deg
.rotate {
    transform: rotate(180deg);
}

@supports (display: grid) {
    .row {
        display: grid;
        grid-template-columns: 1fr repeat(3, 2fr) 1fr;
        grid-template-rows: repeat(4, 1fr);
        align-items: center;
        align-content: space-between;
        height: 100%
    }
    /* 
    //the code below is the css code output for the following scss code
    .col-1 {
        grid-column: 1 / 2;
    }
    .col-2 {
        grid-column: 2 / 3;
    }
    .col-3 {
        grid-column: 3/ 4;
    }
    .col-4 {
        grid-column: 4/ 5;
    }
    .col-5 {
        grid-column: 5 / 6;
    }
    
    .row-1{
        grid-row: 1 / 2;
    }
    .row-2 {
        grid-row: 2 / 3;
    }
    .row-3 {
        grid-row: 3 / 4;
    }
    .row-4 {
        grid-row: 4 / 5;
    }
    */
    $possition-start: 1;
    
    @mixin column($possition-start) {
        grid-column-start: $possition-start;
        grid-column-end: $possition-start + 1;
    }
    @mixin row($possition-start){
        grid-row-start: $possition-start;
        grid-row-end: $possition-start + 1;
    }
    
    @for $index from 1 to 5 {
        .column-#{$index}{
            @include column($index);
        }
    }
    @for $index from 1 to 4 {
        .row-#{index} {
            @include row($index);
        }
    }
}
@supports not (display: grid) {
	// All of your flexbox SCSS code here.   
    /*==============Pure css code============ */ 
/*
//create a flex container
.row {
    display: flex;
    flex-flow: row wrap;
    align-items: center;
    align-content: space-between;
    height: 100%
}
//attach styles to each cell
.cell {
    flex: 1;
    text-align: center;
}
.col-1,
.col-8 {
    flex: 0 0 12.5%;
}
.col-2 {
    flex: 0 0 25%;
}
.col-4 {
    flex: 0 0 100%;
}
.col-6{
    flex: 0 0;
}
.offset-2 {
    margin-left: 12.5%;
}
.offset-6 {
    margin-left: 25%;
}*/
/*scss Part*/
//create a flex container 
    .row {
        display: flex;
        flex-flow: row wrap;
        align-items: center;
        align-content: space-between;
        height: 100%
    }
    //attach styles to each cell
    .cell {
        flex: 1;
        text-align: center;
    }

    //setting variables
    $num-columns : 8;
    $one-column: 100% / $num_columns;
    $loop-start: 1;
    $loop-end: $num-columns + 1;

    //mixins
    @mixin col($span-num) {
        flex: 0 0 $one-column * $span-num;
    }
    @mixin offset($offset-num) {
        margin-left: $one-column * $offset-num;
    }

    //make column classes
    @for $index from $loop-start to $loop-end {
        .col-#{$index} {
            @include col($index)
        }
    }
    //make offset classes
    @for $index from $loop-start  to $loop-end {
        .offset-#{$index} {
            @include offset($index)
        }
    }        
}